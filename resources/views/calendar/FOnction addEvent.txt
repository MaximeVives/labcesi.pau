var dateDayStr = prompt('Entrer la date de debut ( format : AAAA-MM-JJ )');
                            var dateStartStr = prompt('Entrer l\'heure de début ( format : HH )');
                            var dateEndStr = prompt('Entrer l\'heure de fin ( format : HH )');
                            // var dateDay = new Date(dateDayStr); // will be in local time
                            if (dateDayStr === "" || dateStartStr === "" || dateEndStr === ""){
                                alert('La date est invalide.');
                            }
                            else {
                                let dateStart = dateDayStr.concat(' ', dateStartStr, ':00');
                                let dateEnd = dateDayStr.concat(' ', dateEndStr, ':00');

                                // console.log(dateStart, dateEnd);

                                dateStart = new Date(dateStart); 
                                dateEnd = new Date(dateEnd); 



                                if (!isNaN(dateStart.valueOf()) && !isNaN(dateEnd.valueOf())) { // valid?
                                    let dateStartParse = Date.parse(dateStart); //On transforme la date en int 
                                    let dateEndParse = Date.parse(dateEnd); //On transforme la date en int 

                                    let stop = false;
                                    let now = Date.parse(new Date());
                                    

                                    for (let i = 0; i < allHourStart.length; i++) {

                                        // ON CHECK QUE LA RESERVATION SOIT PAS INFERIEUR A LA DATE DU JOUR 
                                        if (dateStartParse < now && stop == false) {
                                            alert("Le créneau que vous essayez de réserver est déjà passé.");
                                            stop = true;
                                        }

                                        //Check avant le créneau
                                        else if (((dateStartParse < allHourStart[i]) && (dateEndParse <= allHourStart[i])) && stop == false) { 
                                            
                                            // Si c'est bon avant on peut valider le créneau car les dates sont bonnes
                                            calendar.addEvent({
                                                title: 'dynamic event',
                                                start: dateStart,
                                                end: dateEnd,
                                                allDay: false
                                            });

                                            stop = true;
                                            

                //                             let id_user = elem[i].childNodes[1].value;
                                            // let title = elem[i].childNodes[3].value;
                                            // let date_debut = elem[i].childNodes[5].value;
                                            // let date_fin = elem[i].childNodes[7].value;
                                            // let id_outil = elem[i].childNodes[9].value;
                                            // let name_outil = elem[i].childNodes[11].value;
                                            // let url = "/calendar/".concat(elem[i].classList[1]);

                                            // let httpRequest = new XMLHttpRequest();

                                            // if (!httpRequest) {
                                            //     alert('Abandon :( Impossible de créer une instance de XMLHTTP');
                                            // }

                                            // httpRequest.onreadystatechange = alertContents;
                                            // httpRequest.open('POST', '/addEvent', true);
                                            // httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                                            // httpRequest.send("idUser="+encodeURIComponent(id_user)+"title="+encodeURIComponent(title)+"dateDebut="+encodeURIComponent(date_debut)+"dateFin="+encodeURIComponent(date_fin)+"idOutil="+encodeURIComponent(id_outi));

                                            // function alertContents() {
                                            //     if (httpRequest.readyState === XMLHttpRequest.DONE) {
                                            //         if (httpRequest.status === 200) {
                                            //             alert(httpRequest.responseText);
                                            //         } else {
                                            //             alert('Il y a eu un problème avec la requête.');
                                            //         }
                                            //     }
                                            // }
                                            // $.ajax({
                                            //     url: '/addEvent',
                                            //     type: 'POST',
                                            //     data: { idUser: $id_user, title: $title, dateDebut: $date_debut, dateFin: $date_fin, idOutil: $id_outil },

                                            //     dataType : 'html',
                                            //     success : function(code_html, statut){
                                            //         alert('Produit ajouté au panier');
                                            //         // document.location.reload(true);
                                            //     },

                                            //     error : function(resultat, statut, erreur){
                                            //             console.log("statut");
                                            //             console.log("erreur");
                                                        
                                            //     },

                                            //     complete : function(resultat, statut){

                                            //     }
                                            // });
                                                // alert('Great. Now, update your database...');
                                                //#TODO   Envoyer ces données en POST pour une page '/addEvent' -> Le controller stack les données (Ajax)   
                                        }
                                        // Collision de créneau
                                        else{
                                            if (stop == false) {
                                                if ((dateStartParse >= allHourStart[i] && dateStartParse <= allHourEnd[i]) || (dateEndParse >= allHourStart[i] && dateEndParse <= allHourEnd[i])) {
                                                    alert("Ce créneau est déjà pris par quelqu'un d'autre");
                                                    stop = true;
                                                }
                                            }
                                        }
                                    }
                                    // ICi on a check tous les creneaux et a aucun moment nos dates se situent avant ou pendant un créneau
                                    // Le créneau de l'user est après le dernier créneau

                                    if (stop == false) {
                                        calendar.addEvent({
                                            title: 'dynamic event',
                                            start: dateStart,
                                            end: dateEnd,
                                            allDay: false
                                        });

                                        // let httpRequest = new XMLHttpRequest();

                                        // if (!httpRequest) {
                                        //     alert('Abandon :( Impossible de créer une instance de XMLHTTP');
                                        // }

                                        // httpRequest.onreadystatechange = alertContents;
                                        // httpRequest.open('POST', '/addEvent', true);
                                        // httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                                        // httpRequest.send("idUser="+encodeURIComponent(id_user)+"title="+encodeURIComponent(title)+"dateDebut="+encodeURIComponent(dateStart)+"dateFin="+encodeURIComponent(dateEnd)+"idOutil="+encodeURIComponent(id_outil));

                                        // function alertContents() {
                                        //     if (httpRequest.readyState === XMLHttpRequest.DONE) {
                                        //         if (httpRequest.status === 200) {
                                        //             alert(httpRequest.responseText);
                                        //         } else {
                                        //             alert('Il y a eu un problème avec la requête.');
                                        //         }
                                        //     }
                                        // }
                                    }
                                }
                                else {
                                    alert('La date est invalide.');
                                }
                            }
                        }
                    }














================================================================================================
    <script src="FullCalendar/main.js"></script>
    <script lang="javascript">
        document.addEventListener('DOMContentLoaded', function () {
            let event = [];

            let allHourStart = []; //Permet dechecker si la date de départ n'est pas déjà prise
            let allHourEnd = [];

            let bgColor = "";
            let txtColor ="";         


            let elem = document.getElementsByClassName("compteur");


            for (let i = 0; i < elem.length; i++) {
                
                let id_user = elem[i].childNodes[1].value;
                let title = elem[i].childNodes[3].value;
                let date_debut = elem[i].childNodes[5].value;
                let date_fin = elem[i].childNodes[7].value;
                let id_outil = elem[i].childNodes[9].value;
                let name_outil = elem[i].childNodes[11].value;
                let url = "/calendar/".concat(elem[i].classList[1]);
                // console.log(typeof id_outil);


                allHourStart[i] = Date.parse(date_debut); //On stocke toutes les heures de départ
                allHourEnd[i] = Date.parse(date_fin); // On stocke toutes les heures de fin


                switch (id_outil) {
                    case "1":
                        bgColor = "rgb(255, 200, 69)";
                        txtColor = "rgb(255, 200, 69)";
                        // console.log("1");
                        break;

                    case "2":
                        bgColor = "#5C8AD8";
                        txtColor = "#5C8AD8";
                        // console.log("2");
                        break;
                
                    default:
                        bgColor = "rgb(255, 200, 69)";
                        txtColor = "rgb(255, 200, 69)";
                        // console.log("default");
                        break;
                }

                // console.log(bgColor);
                // console.log(txtColor);
                
                let temp = [
                    
                    {
                        "title": title,
                        "start": date_debut, //Date de départ en ISO SQL
                        "end": date_fin,
                        "backgroundColor": bgColor, //Idée : Une couleur pour chaque type de réservation
                        // => Jaune Cesi pour l'impression 3D et Bleu Cesi pour découpeuse laser ou par section qui l'utilises
                        "borderColor": txtColor,
                        "textColor": txtColor,
                        "url": url
                    },
                
                ]      //Objets en JSON

                event = event.concat(temp);
            }

            let calendarElement = document.getElementById('calendar');
            let calendar = new FullCalendar.Calendar(calendarElement, {
                initialView: 'dayGridMonth',
                locale: 'fr',
                fixedWeekCount: false,
                showNonCurrentDates: false,
                weekends: false,
                slotMinTime: "08:00:00",
                slotMaxTime: "18:00:00",
                allDaySlot: false,
                headerToolbar: {
                    left: "addEventButton",
                    center: 'prev title next',
                    right: 'today dayGridMonth,timeGridWeek,list',
                },
                // selectable: true,
                // selectHelper: true,
                // eventLimit: true,

                customButtons: {
                    addEventButton: {
                        text: 'Ajouter une réservation',
                        click: function () {
                            window.open("/addEvent");
                        }
                    }                            
                },
                buttonText: {
                    today: "Aujourd'hui",
                    month: "Mois",
                    week: "Semaine",
                    list: 'Liste'
                },
                eventOverlap: false,
                events: event,
                nowIndicator: true,
                editable: true, //Déplacer les events
                eventDrop: (infos) =>{
                    // alert("L'événement a été déplacé au " + infos.event.start);
                    if(!confirm("Etes-vous sur de vouloir déplacer l'événement au "+infos.event.start)){
                        infos.revert(); //Si pas de confirmation --> Annulé
                    }
                    else{
                        //#TODO Actualiser la BDD
                    }
                },
                eventResize: (infos) => {   //Réajuster la durée
                    let id_resa = parseInt(infos.event.url.substring((infos.event.url).length-1));
                    // let title = infos.event.title;
                    let date_debut = infos.event.start;
                    let date_fin = infos.event.end;
                    console.log("idResa="+encodeURIComponent(id_resa)+"dateDebut="+encodeURIComponent(date_debut)+"dateFin="+encodeURIComponent(date_fin));

                    let httpRequest = new XMLHttpRequest();

                    if (!httpRequest) {
                        alert('Abandon :( Impossible de créer une instance de XMLHTTP');
                    }

                    httpRequest.onreadystatechange = alertContents;
                    httpRequest.open('GET', '/upEvent', true);
                    httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                    httpRequest.send("idResa="+encodeURIComponent(id_resa)+"dateDebut="+encodeURIComponent(date_debut)+"dateFin="+encodeURIComponent(date_fin));

                    function alertContents() {
                        if (httpRequest.readyState === XMLHttpRequest.DONE) {
                            if (httpRequest.status === 200) {
                                alert(httpRequest.responseText);
                            } else {
                                alert('Il y a eu un problème avec la requête.');
                            }
                        }
                    }
                    
                    
                    // $.ajax({
                    //     url: '/upEvent',
                    //     type: 'POST',
                    //     data: { idResa: $id_resa, dateDebut: $date_debut, dateFin: $date_fin },

                    //     dataType : 'html',
                    //     success : function(code_html, statut){
                    //         alert('Produit ajouté au panier');
                    //         // document.location.reload(true);
                    //     },

                    //     error : function(resultat, statut, erreur){
                    //             console.log("statut");
                    //             console.log("erreur");
                                
                    //     },

                    //     complete : function(resultat, statut){

                    //     }
                    // });
                },
                dateClick: (infos) => {
                    // #TODO redirect with date -> ajouter un event
                    // window.open('/cible'); //Permet d'ouvrir une page exemple /addEvent comme TODO plus haut mais avec la date en plus 
                },
                eventClick: (infos) => {
                    if (info.event.url) {
                        window.open(info.event.url); //#TODO page récap d'un évent
                    }
                }
            });


            calendar.render();
        });
    </script>